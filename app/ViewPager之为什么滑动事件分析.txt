了解ViewPager的滑动切换界面原理,先从几个重要的方法下手,
onInterceptionTouchEvent : 解决了viewpager中嵌套listView 滑动的问题
1.先了解类Scroller:
   (1) computeScrollOffset():
        注释: 当返回true时候,表明该动作 还没做完成,动画还在继续绘制中
        这个方法主要针对两种滑动方式的位置进行设置:SCROLL_MODE,FLING_MODE.
        拿SCROLL_MODE举例:
           case SCROLL_MODE:
                           final float x = mInterpolator.getInterpolation(timePassed * mDurationReciprocal);
                           mCurrX = mStartX + Math.round(x * mDeltaX);
                           mCurrY = mStartY + Math.round(x * mDeltaY);
                           break;
        最后mCurrX,mCurrY 让我们直到当前在哪个位置.

   (2) abortAnimation():mCurrX = mFinalX,mCurrY = mFinalY,mFinished = true;
2.ViewPager:
            setScrollState(int newState) {
                if (mScrollState == newState) {
                    return;
                }
                mScrollState = newState;
                if (mPageTransformer != null) {
                    // PageTransformers can do complex things that benefit from hardware layers.
                    enableLayers(newState != SCROLL_STATE_IDLE);
                }
                if (mOnPageChangeListener != null) {
                    mOnPageChangeListener.onPageScrollStateChanged(newState);
                }
            }
onPageScrollStateChanged(state)只有在这个方法中才有调用.

            populate(int newCurrentItem){}

static class ItemInfo{
   Object mObject;
   int position;
   boolean scrolling;
   float widthFactor;
   float offset;
}

initViewPager()
初始化时候设置焦点,指当child都不获取焦点时候获取焦点
        setWillNotDraw(false);
        setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);
        setFocusable(true);


setAdapter(PagerAdapter adapter):
1.首先会销毁CacheList的items:
            mAdapter.unregisterDataSetObserver(mObserver);
            mAdapter.startUpdate(this);
            for (int i = 0; i < mItems.size(); i++) {
                final ItemInfo ii = mItems.get(i);
                mAdapter.destroyItem(this, ii.position, ii.object);
            }
            mAdapter.finishUpdate(this);

2.填充视图:populate(int newCurrentItem);
           (1)计算要填充哪些视图,默认情况下填充视图前后1张;
           final int pageLimit = mOffscreenPageLimit;
           final int startPos = Math.max(0, mCurItem - pageLimit);
           final int N = mAdapter.getCount();
           final int endPos = Math.min(N-1, mCurItem + pageLimit);
           (2)在CacheList中找到newCurrentItem对应的位置,如果找不到重新addNewItem();
           这里会调用我们熟悉的adapter.instantiateItem();
           (3)在CacheList中寻找前后view的位置,如果找不到,重新新建,并添加到CacheList中.
              不仅如此,还要把CacheList中没用的View删掉,就会调用adapter.destroyItem();
              最后,计算每一页的偏移量.
           (4)这时候才显示当前currentItem;
              mAdapter.setPrimaryItem(ViewGroup container, int position, Object object)
           (5)若子view需要focus,会将focus传给child.
           ViewPager通过这个预加载方式让系统能够界面滚动时候不卡顿，但有时候我们需要取消预加载，设置
           setOffscreenPageLimit(0)是没有影响的，这篇文章setUserVisibleHint()入手
           http://www.cnblogs.com/lee0oo0/p/3713391.html


第一个问题:一个View从在我们指定的时间内从一个位置滚动到另外一个位置，我们利用Scroller类可以实现匀速滚动，而不是瞬间的移动的效果.
1. ViewCompat.postInvalidateOnAnimation(this) --> View.invalidate() --> view.draw();
2.View.draw(Canvas canvas)
         /*
         * Draw traversal performs several drawing steps which must be executed
         * in the appropriate order:
         *
         *      1. Draw the background
         *      2. If necessary, save the canvas' layers to prepare for fading
         *      3. Draw view's content
         *      4. Draw children
         *      5. If necessary, draw the fading edges and restore layers
         *      6. Draw decorations (scrollbars for instance)
         */
3.draw children --> computeScroll
                    判断computeScrollOffset 是否为true,如果是表示没有滑动到目标位置.调用scrollTo -->ViewCompat.postInvalidateOnAnimation();


http://www.bubuko.com/infodetail-535920.html
第二个问题:ViewPager是怎么实现预加载的,

看看computeScroll():
    @Override
    public void computeScroll() {
        if (!mScroller.isFinished() && mScroller.computeScrollOffset()) {
            int oldX = getScrollX();
            int oldY = getScrollY();
            int x = mScroller.getCurrX();
            int y = mScroller.getCurrY();

            if (oldX != x || oldY != y) {
                scrollTo(x, y);
                if (!pageScrolled(x)) {
                    mScroller.abortAnimation();
                    scrollTo(0, y);
                }
            }

            // Keep on drawing until the animation has finished.
            ViewCompat.postInvalidateOnAnimation(this);
            return;
        }

        // Done with scroll, clean up state.
        completeScroll(true);
    }
mScroller.computeScrollOffset():告诉我们这时候在哪个位置,当我们到目标位置时候返回true;




什么时候会触发onPagerStateChanged()
1.当我们滑动到目标位置时候,这时候状态就是SCROLL_STATE_IDLE;
2.在smoothScrollTo(int destX,int destY,int velocity)过程状态是SCROLL_STATE_SETTLING;
3.当我们手指拖着viewpager移动时候,这时候在ACTION_MOVE状态中,SCROLL_STATE_DRAGGING;
4.如果本身是滑动状态,如果我们手指突然按住,也会触发ACTION_DOWN.如果这时候离目标地还有一段距离,就会设置为SCROLL_STATE_DRAGGING;

onInterceptTouchEvent()
1.当在移动过程中会拦截事件,在不可拖动时候不拦截事件
    if (action != MotionEvent.ACTION_DOWN) {
              if (mIsBeingDragged) {
                  if (DEBUG) Log.v(TAG, "Intercept returning true!");
                  return true;
              }
              if (mIsUnableToDrag) {
                  if (DEBUG) Log.v(TAG, "Intercept returning false!");
                  return false;
              }
          }
2.在ACTION_MOVE过程中,
             if (dx != 0 && !isGutterDrag(mLastMotionX, dx) &&
                 canScroll(this, false, (int) dx, (int) x, (int) y)) {
                 ....
                 mIsUnableToDrag = true;
                 return false;
             }
            canScroll()最后会调用View.canScrollHorizontally()
            public boolean canScrollHorizontally(int direction) {
                //offset = oldScrollX - newScrollX;
                if (range == 0) return false;
                if (direction < 0) {//表示右滑,这时的偏移量 offset > 0,表示该view是可滑动的,
                    return offset > 0;
                } else {
                    return offset < range - 1;
                }
            }


      // 找到最里面的可滑动child,假设里面有个ScrollView,且ScrollView里面没有可以滑动的child时候,就直接检查ScrollView.canScrollHorizontally方法.
       protected boolean canScroll(View v, boolean checkV, int dx, int x, int y) {
              if (v instanceof ViewGroup) {
                  final ViewGroup group = (ViewGroup) v;
                  final int scrollX = v.getScrollX();
                  final int scrollY = v.getScrollY();
                  final int count = group.getChildCount();
                  // Count backwards - let topmost views consume scroll distance first.
                  for (int i = count - 1; i >= 0; i--) {
                      // TODO: Add versioned support here for transformed views.
                      // This will not work for transformed views in Honeycomb+
                      final View child = group.getChildAt(i);
                      if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&
                              y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&
                              canScroll(child, true, dx, x + scrollX - child.getLeft(),
                                      y + scrollY - child.getTop())) {
                          return true;
                      }
                  }
              }

              return checkV && ViewCompat.canScrollHorizontally(v, -dx);
          }
    ViewCompat.canScrollHorizontally最后会调用View.canScrollHorizontally(int direction)
     public boolean canScrollHorizontally(int direction) {
            final int offset = computeHorizontalScrollOffset();
            final int range = computeHorizontalScrollRange() - computeHorizontalScrollExtent();
            if (range == 0) return false;
            if (direction < 0) {//表示右滑,这时的偏移量 offset > 0,表示该view是可滑动的,
                return offset > 0;
            } else {
                return offset < range - 1;
            }
        }

     onTouchEvent()
     1.ACTION_DOWN 调用populate()填充视图
     2.ACTION_MOVE,
             if (xDiff > mTouchSlop && xDiff > yDiff) {
                                     if (DEBUG) Log.v(TAG, "Starting drag!");
                                     mIsBeingDragged = true;
                                     requestParentDisallowInterceptTouchEvent(true);
                                     mLastMotionX = x - mInitialMotionX > 0 ? mInitialMotionX + mTouchSlop :
                                             mInitialMotionX - mTouchSlop;
                                     mLastMotionY = y;
                                     setScrollState(SCROLL_STATE_DRAGGING);
                                     setScrollingCacheEnabled(true);

                                     // Disallow Parent Intercept, just in case
                                     ViewParent parent = getParent();
                                     if (parent != null) {
                                         parent.requestDisallowInterceptTouchEvent(true);
                                     }
                                 }
     3.ACTION_UP:
            if (mIsBeingDragged) {
                ......//获得要切换的页面
                int nextPage = determineTargetPage(currentPage, pageOffset, initialVelocity,
                        totalDelta);
                //这里实现页面切换
                setCurrentItemInternal(nextPage, true, true, initialVelocity);
　　　　　　　　　　　　......
            }


    void setCurrentItemInternal(int item, boolean smoothScroll, boolean
        always, int velocity) {
        ......决定onPageSelected是否调用
        final boolean dispatchSelected = mCurItem != item;
        ......填充视图，并滚动到目标位置
        populate(item);
        scrollToItem(item, smoothScroll, velocity, dispatchSelected);
    }
//这个方法只会在populate()这个方法中调用.
ItemInfo addNewItem(int position,int index){
   ItemInfo ii = new ItemInfo();
   ii.position = position;
   ii.object = mAdapter.instantiateItem(this,position);
   ii.widthFactor = mAdapter.getPageWidth(position);//这是百分比
   if (index < 0 || index >= mItems.size()) {
               mItems.add(ii);
   } else {
       mItems.add(index, ii);
   }
   return ii;
}

填充view,可以理解为在显示当前item时候,会在缓存列表中缓存至少一个左右item,至少是多少,我们可以自己设置,都每个item都有一个偏移量就是离屏幕左侧的一个偏移量
填充过程肯定涉及到adapter的重写方法,首先会有
       mAdapter.startUpdate();
       mAdapter.instantiateItem(),初始化当前item和左右视图
       mAdapter.destroyItem(),删除缓存列表中没用的item

设置好左右视图后,这时候要显示当前视图
      mAdapter.setPrimaryItem()
      mAdapter.finishUpdate();

void populate(int newCurrentItem) {
        ItemInfo oldCurInfo = null;
        int focusDirection = View.FOCUS_FORWARD;
        if (mCurItem != newCurrentItem) {
            focusDirection = mCurItem < newCurrentItem ? View.FOCUS_RIGHT : View.FOCUS_LEFT;
            //找到旧item,方便计算当前item 跟 oldItem的偏移量
            oldCurInfo = infoForPosition(mCurItem);
            mCurItem = newCurrentItem;
        }

        if (mAdapter == null) {
            //缓存所有child,然后按一定的优先级排列
            sortChildDrawingOrder();
            return;
        }

        // Bail now if we are waiting to populate.  This is to hold off
        // on creating views from the time the user releases their finger to
        // fling to a new position until we have finished the scroll to
        // that position, avoiding glitches from happening at that point.
        if (mPopulatePending) {
            if (DEBUG) Log.i(TAG, "populate is pending, skipping for now...");
            sortChildDrawingOrder();
            return;
        }

        // Also, don't populate until we are attached to a window.  This is to
        // avoid trying to populate before we have restored our view hierarchy
        // state and conflicting with what is restored.
        if (getWindowToken() == null) {
            return;
        }

        //数据要发生变化,要开始更新了
        mAdapter.startUpdate(this);

        final int pageLimit = mOffscreenPageLimit;//默认是1,
        final int startPos = Math.max(0, mCurItem - pageLimit);
        final int N = mAdapter.getCount();
        final int endPos = Math.min(N-1, mCurItem + pageLimit);

        //假设adapter.getCount发生了变化,抛出异常.
        if (N != mExpectedAdapterCount) {
            String resName;
            try {
                resName = getResources().getResourceName(getId());
            } catch (Resources.NotFoundException e) {
                resName = Integer.toHexString(getId());
            }
            throw new IllegalStateException("The application's PagerAdapter changed the adapter's" +
                    " contents without calling PagerAdapter#notifyDataSetChanged!" +
                    " Expected adapter item count: " + mExpectedAdapterCount + ", found: " + N +
                    " Pager id: " + resName +
                    " Pager class: " + getClass() +
                    " Problematic adapter: " + mAdapter.getClass());
        }

        // Locate the currently focused item or add it if needed.
        // 找到currItem在缓存列表中的排列的位置.
        int curIndex = -1;
        ItemInfo curItem = null;
        for (curIndex = 0; curIndex < mItems.size(); curIndex++) {
            final ItemInfo ii = mItems.get(curIndex);
            if (ii.position >= mCurItem) {
                if (ii.position == mCurItem) curItem = ii;
                break;
            }
        }
        //若在缓存列表中找不到这个currItem,添加一个,addNewItem主要调用mAdapter.instantiateItem(),
        //而这个方法也是我们PageAdapter,FragmentAdapter,FragmentStateAdapter要有相对应的处理逻辑
        //这样我们取到当前currItem 在当前缓存列表中的位置 curIndex.
        if (curItem == null && N > 0) {
            curItem = addNewItem(mCurItem, curIndex);//保证了在mItems.size()中位置curIndex 就是curItem,
        }


        // 接下来整个缓存列表的核心,就是说ViewPager是怎么做到在滑动时候左右两边是加载好的
        // 拿左侧举例,默认先缓存一个左侧的嘛,那么就要确保当前curItem 在缓存列表的前一个也是
        // 左侧的那一个,接下来删掉离curItem 偏移量较远的item, 怎样才是偏移量较远的呢,我们可以
        // 自己定义,  if (extraWidthLeft >= leftWidthNeeded && pos < startPos)
        // leftWithNeeded = 1, 所以我们偏移量 >=1 , 考虑一种特殊情况 curItem.position = 0;
        // 那么就左侧是没有删的了.
        // 右侧也是一样.
        // 最后,还有一个重要的工作,计算离curItem的偏移量,只要在缓存列表中的item都要计算偏移量.



        // Fill 3x the available width or up to the number of offscreen
        // pages requested to either side, whichever is larger.
        // If we have no current item we have no work to do.
        if (curItem != null) {
            float extraWidthLeft = 0.f;
            int itemIndex = curIndex - 1;
            ItemInfo ii = itemIndex >= 0 ? mItems.get(itemIndex) : null;
            final int clientWidth = getClientWidth();
            final float leftWidthNeeded = clientWidth <= 0 ? 0 :
                    2.f - curItem.widthFactor + (float) getPaddingLeft() / (float) clientWidth;
            for (int pos = mCurItem - 1; pos >= 0; pos--) {
                if (extraWidthLeft >= leftWidthNeeded && pos < startPos) {
                    if (ii == null) {
                        break;
                    }
                    if (pos == ii.position && !ii.scrolling) {
                        mItems.remove(itemIndex);
                        mAdapter.destroyItem(this, pos, ii.object);
                        if (DEBUG) {
                            Log.i(TAG, "populate() - destroyItem() with pos: " + pos +
                                    " view: " + ((View) ii.object));
                        }
                        itemIndex--;
                        curIndex--;
                        ii = itemIndex >= 0 ? mItems.get(itemIndex) : null;
                    }
                } else if (ii != null && pos == ii.position) {
                    extraWidthLeft += ii.widthFactor;
                    itemIndex--;
                    ii = itemIndex >= 0 ? mItems.get(itemIndex) : null;
                } else {
                    ii = addNewItem(pos, itemIndex + 1);
                    extraWidthLeft += ii.widthFactor;
                    curIndex++;
                    ii = itemIndex >= 0 ? mItems.get(itemIndex) : null;
                }
            }

            float extraWidthRight = curItem.widthFactor;
            itemIndex = curIndex + 1;
            if (extraWidthRight < 2.f) {
                ii = itemIndex < mItems.size() ? mItems.get(itemIndex) : null;
                final float rightWidthNeeded = clientWidth <= 0 ? 0 :
                        (float) getPaddingRight() / (float) clientWidth + 2.f;
                for (int pos = mCurItem + 1; pos < N; pos++) {
                    if (extraWidthRight >= rightWidthNeeded && pos > endPos) {
                        if (ii == null) {
                            break;
                        }
                        if (pos == ii.position && !ii.scrolling) {
                            mItems.remove(itemIndex);
                            mAdapter.destroyItem(this, pos, ii.object);
                            if (DEBUG) {
                                Log.i(TAG, "populate() - destroyItem() with pos: " + pos +
                                        " view: " + ((View) ii.object));
                            }
                            ii = itemIndex < mItems.size() ? mItems.get(itemIndex) : null;
                        }
                    } else if (ii != null && pos == ii.position) {
                        extraWidthRight += ii.widthFactor;
                        itemIndex++;
                        ii = itemIndex < mItems.size() ? mItems.get(itemIndex) : null;
                    } else {
                        ii = addNewItem(pos, itemIndex);
                        itemIndex++;
                        extraWidthRight += ii.widthFactor;
                        ii = itemIndex < mItems.size() ? mItems.get(itemIndex) : null;
                    }
                }
            }

            calculatePageOffsets(curItem, curIndex, oldCurInfo);
        }

        if (DEBUG) {
            Log.i(TAG, "Current page list:");
            for (int i=0; i<mItems.size(); i++) {
                Log.i(TAG, "#" + i + ": page " + mItems.get(i).position);
            }
        }


        // primary : 主要的,就是我们当前curItem,所以我们要实现一些特殊的功能,首先要
        // super.setPrimaryItem();
        mAdapter.setPrimaryItem(this, mCurItem, curItem != null ? curItem.object : null);


        // 表示所有child的操作都已经完成.
        mAdapter.finishUpdate(this);

        // Check width measurement of current pages and drawing sort order.
        // Update LayoutParams as needed.
        final int childCount = getChildCount();
        for (int i = 0; i < childCount; i++) {
            final View child = getChildAt(i);
            final LayoutParams lp = (LayoutParams) child.getLayoutParams();
            lp.childIndex = i;
            if (!lp.isDecor && lp.widthFactor == 0.f) {
                // 0 means requery the adapter for this, it doesn't have a valid width.
                final ItemInfo ii = infoForChild(child);
                if (ii != null) {
                    lp.widthFactor = ii.widthFactor;
                    lp.position = ii.position;
                }
            }
        }
        sortChildDrawingOrder();

        // 查看是否有 focus ,可能是viewPager本身,也可能是child
        // 若child有focus
        if (hasFocus()) {
            View currentFocused = findFocus();
            ItemInfo ii = currentFocused != null ? infoForAnyChild(currentFocused) : null;
            if (ii == null || ii.position != mCurItem) {
                for (int i=0; i<getChildCount(); i++) {
                    View child = getChildAt(i);
                    ii = infoForChild(child);
                    if (ii != null && ii.position == mCurItem) {
                        if (child.requestFocus(focusDirection)) {
                            break;
                        }
                    }
                }
            }
        }
    }


private void completeScroll(boolean postEvents) {
        boolean needPopulate = mScrollState == SCROLL_STATE_SETTLING;
        if (needPopulate) {
            // Done with scroll, no longer want to cache view drawing.
            setScrollingCacheEnabled(false);
            mScroller.abortAnimation();
            int oldX = getScrollX();
            int oldY = getScrollY();
            int x = mScroller.getCurrX();
            int y = mScroller.getCurrY();
            if (oldX != x || oldY != y) {
                scrollTo(x, y);
                if (x != oldX) {
                    pageScrolled(x);
                }
            }
        }
        mPopulatePending = false;
        for (int i=0; i<mItems.size(); i++) {
            ItemInfo ii = mItems.get(i);
            if (ii.scrolling) {
                needPopulate = true;
                ii.scrolling = false;
            }
        }
        if (needPopulate) {
            if (postEvents) {
                ViewCompat.postOnAnimation(this, mEndScrollRunnable);
            } else {
                mEndScrollRunnable.run();
            }
        }
    }

private boolean pageScrolled(int xpos) {
        if (mItems.size() == 0) {
            mCalledSuper = false;
            onPageScrolled(0, 0, 0);
            if (!mCalledSuper) {
                throw new IllegalStateException(
                        "onPageScrolled did not call superclass implementation");
            }
            return false;
        }
        final ItemInfo ii = infoForCurrentScrollPosition();
        final int width = getClientWidth();
        final int widthWithMargin = width + mPageMargin;
        final float marginOffset = (float) mPageMargin / width;
        final int currentPage = ii.position;
        //pageOffset = [-1,1]
        final float pageOffset = (((float) xpos / width) - ii.offset) /
                (ii.widthFactor + marginOffset);
        final int offsetPixels = (int) (pageOffset * widthWithMargin);

        mCalledSuper = false;
        onPageScrolled(currentPage, pageOffset, offsetPixels);
        if (!mCalledSuper) {
            throw new IllegalStateException(
                    "onPageScrolled did not call superclass implementation");
        }
        return true;
    }


onInterceptTouchEvent(){}

1.在MotionEvent.ACTION_CANCEL和MotionEvent.ACTION_UP是不拦截的.
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
                // Release the drag.
                if (DEBUG) Log.v(TAG, "Intercept done!");
                mIsBeingDragged = false;
                mIsUnableToDrag = false;
                mActivePointerId = INVALID_POINTER;
                if (mVelocityTracker != null) {
                    mVelocityTracker.recycle();
                    mVelocityTracker = null;
                }
                return false;
            }

2.if (action != MotionEvent.ACTION_DOWN) {
              if (mIsBeingDragged) {
                  if (DEBUG) Log.v(TAG, "Intercept returning true!");
                  return true;
              }
              if (mIsUnableToDrag) {
                  if (DEBUG) Log.v(TAG, "Intercept returning false!");
                  return false;
              }
          }
    所以不要拦截有两种情况:1.mIsBeingDragged = false;
                           2.mIsUnableToDrag = true;
3.ACTION_MOVE:判断子view是否可以滑动.
isGutterDrag(float x, float dx)
注释:(x < mGutterSize && dx > 0) || (x > getWidth() - mGutterSize && dx < 0)
canScroll(View v, boolean checkV, int dx, int x, int y)
表示这个v的内部是否有可移动的,而且手指是在可移动范围内.
        mIsUnableToDrag = true情况如下:
        要么子view可以滑动,怎么判断是是可以滑动的,核心代码view.canScrollHorizontally:
          public boolean canScrollHorizontally(int direction) {
                  final int offset = computeHorizontalScrollOffset();//计算偏移量.
                  final int range = computeHorizontalScrollRange() - computeHorizontalScrollExtent();
                  if (range == 0) return false;
                  if (direction < 0) {//右滑,这里的direction在外面已经做了取反
                      return offset > 0;
                  } else {
                      return offset < range - 1;
                  }
              }

        要么xDiff > mTouchSlop && xDiff * 0.5f > yDiff-->mIsBeingDragged = true,
         if (xDiff > mTouchSlop && xDiff * 0.5f > yDiff) {
                            if (DEBUG) Log.v(TAG, "Starting drag!");
                            mIsBeingDragged = true;
                            requestParentDisallowInterceptTouchEvent(true);
                            setScrollState(SCROLL_STATE_DRAGGING);
                            mLastMotionX = dx > 0 ? mInitialMotionX + mTouchSlop :
                                    mInitialMotionX - mTouchSlop;
                            mLastMotionY = y;
                            setScrollingCacheEnabled(true);
                        }
         阻断parent拦截事件,同时把状态变为滚动状态.
         调用performDrag();这里还处理极端向左和极端向右的状态.
                view.scrollTo():
                   public void scrollTo(int x, int y) {
                           if (mScrollX != x || mScrollY != y) {
                               int oldX = mScrollX;
                               int oldY = mScrollY;
                               mScrollX = x;
                               mScrollY = y;
                               invalidateParentCaches();
                               onScrollChanged(mScrollX, mScrollY, oldX, oldY);//调用view自身的onScrollChanged()
                               if (!awakenScrollBars()) {
                                   postInvalidateOnAnimation();
                               }
                           }
                       }
                pageScrolled():
                  infoForCurrentScrollPosition:解析为什么当前在哪个位置,为什么在onPageScrolled右滑时候arg0当前页的前一页
                                                                                        左滑时候arg0还是当前页.
                  onPageScrolled() --> dispatchPageScrolled();触发了我们onPageScrolled(arg0,偏移率,偏移量)
                                                                   左滑:arg1 0-->1,偏移量:arg2 0-->屏幕宽度
                                                                   右滑:arg1 1-->0,偏移量:arg2 屏幕宽度-->0


4.ACTION_DOWN:
  (1)一般情况,状态不会发生变化,所以三个重写方法没有一个调用
  (2)会有一种中情况,我们已经ACTION_UP马上ACTION_DOWN,如果这时候已经出现SCROLL_STATE_SETTLING时候,但正常滚动过程还没停止,我们
     应该设置这时的状态是DRAGGING

5.ACTION_UP:这时候判断第二只手指.


onTouchEvent()
注释:down,move操作自己看源码去
    重点说 up 操作
    int nextPage = determineTargetPage(currentPage, pageOffset, initialVelocity,
                   totalDelta);
    setCurrentItemInternal(nextPage, true, true, initialVelocity);
          final boolean dispatchSelected = mCurItem != item;//如果item没有发生变化.就不会触发onPageSelected()
          populate(item);
          scrollToItem(item, smoothScroll, velocity, dispatchSelected);
               smoothScrollTo(destX, 0, velocity);//这里只可能是SCROLL_STATE_SETTLING,和SCROLL_STATE_IDIE这两种状态

    为什么这么说,onPageSelected(不一定),onPageScrollStateChanged(一定)发生
    onPageScrollStateChanged 发生条件:SCROLL_STATE_SETTLING,这
    onPageSelected 发生条件: 界面确实发生了变化,才会发生变化.


setAdapter()
注释:如果在更新数据时候,不要重新用这个方法setAdapter(),因为会destory缓存队列中所有的item

dataSetChanged()
注释:我们直到PagerAdapter有两种模式
           POSITION_UNCHANGED = 1;
           POSITION_NONE = 2
    这两个区别就是 2 会destroy item ,然后再populate 填充视图
    mAdapter.getItemPosition() 就是跟这个有关啦.

onSaveInstanceState()
注释:记住当前的位置,会调用mAdapter.saveState()

onRestoreInstanceState()
注释:恢复当前的位置,会调用mAdapter.restoreState()
                     setCurrentItem()


